# From A4
ADJACENT_CHARACTERS = [
    ("a", "q"),
    ("a", "s"),
    ("a", "z"),
    ("b", "g"),
    ("b", "m"),
    ("b", "n"),
    ("b", "v"),
    ("c", "d"),
    ("c", "v"),
    ("c", "x"),
    ("d", "c"),
    ("d", "e"),
    ("d", "f"),
    ("d", "s"),
    ("e", "d"),
    ("e", "r"),
    ("e", "w"),
    ("f", "d"),
    ("f", "g"),
    ("f", "r"),
    ("f", "v"),
    ("g", "b"),
    ("g", "f"),
    ("g", "h"),
    ("g", "t"),
    ("h", "g"),
    ("h", "j"),
    ("h", "m"),
    ("h", "n"),
    ("h", "y"),
    ("i", "k"),
    ("i", "o"),
    ("i", "u"),
    ("j", "h"),
    ("j", "k"),
    ("j", "u"),
    ("k", "i"),
    ("k", "j"),
    ("k", "l"),
    ("l", "k"),
    ("l", "o"),
    ("m", "b"),
    ("m", "h"),
    ("n", "b"),
    ("n", "h"),
    ("o", "i"),
    ("o", "l"),
    ("o", "p"),
    ("p", "o"),
    ("q", "a"),
    ("q", "w"),
    ("r", "e"),
    ("r", "f"),
    ("r", "t"),
    ("s", "a"),
    ("s", "d"),
    ("s", "w"),
    ("s", "x"),
    ("t", "g"),
    ("t", "r"),
    ("t", "y"),
    ("u", "i"),
    ("u", "j"),
    ("u", "y"),
    ("v", "b"),
    ("v", "c"),
    ("v", "f"),
    ("w", "e"),
    ("w", "q"),
    ("w", "s"),
    ("x", "c"),
    ("x", "s"),
    ("x", "z"),
    ("y", "h"),
    ("y", "t"),
    ("y", "u"),
    ("z", "a"),
    ("z", "x"),
]


FLAVOR_KEYWORDS = [
    "fruit",
    "acidity",
    "cherry",
    "tannins",
    "ripe",
    "spice",
    "oak",
    "dry",
    "fresh",
    "rich",
    "berry",
    "full",
    "plum",
    "apple",
    "sweet",
    "soft",
    "white",
    "crisp",
    "well",
    "light",
    "blackberry",
    "texture",
    "citrus",
    "bodied",
    "cabernet",
    "dark",
    "shows",
    "vanilla",
    "bright",
    "lemon",
    "green",
    "raspberry",
    "good",
    "pepper",
    "juicy",
    "peach",
    "fruity",
    "balanced",
    "firm",
    "chocolate",
    "sauvignon",
    "dried",
    "fine",
    "medium",
    "pinot",
    "spicy",
    "smooth",
    "structure",
    "style",
    "herb",
    "currant",
    "lime",
    "mouth",
    "mineral",
    "herbal",
    "merlot",
    "tart",
    "orange",
    "tannic",
    "clean",
    "wood",
    "concentrated",
    "flavor",
    "hint",
    "creamy",
    "licorice",
    "toast",
    "still",
    "balance",
    "age",
    "lead",
    "earthy",
    "leather",
    "savory",
    "tobacco",
    "chardonnay",
    "ready",
    "easy",
    "elegant",
    "delicious",
    "structured",
    "hints",
    "tight",
    "mouthfeel",
    "complex",
    "aging",
    "dense",
    "great",
    "cassis",
    "cherries",
    "strawberry",
    "herbs",
    "melon",
    "grapefruit",
    "lively",
    "honey",
    "cola",
    "freshness",
    "smoky",
    "color",
    "delivers",
    "clove",
    "vintage",
    "richness",
    "stone",
    "pineapple",
    "young",
    "little",
    "high",
    "tropical",
    "wild",
    "simple",
    "syrah",
    "floral",
    "big",
    "apricot",
    "coffee",
    "refreshing",
    "baked",
    "cinnamon",
    "round",
    "noir",
    "intense",
    "earth",
    "minerality",
    "attractive",
    "solid",
    "weight",
    "alcohol",
    "body",
    "tangy",
    "complexity",
    "lightly",
    "cranberry",
    "zest",
    "gives",
    "crushed",
    "glass",
    "edge",
    "cedar",
    "blanc",
    "toasty",
    "pretty",
    "bitter",
    "flower",
    "generous",
    "grapes",
    "barrel",
    "toasted",
    "silky",
    "oaky",
    "zesty",
    "mocha",
    "aged",
    "spices",
    "textured",
    "almond",
    "blueberry",
    "delicate",
    "fat",
    "chalk",
    "brawny",
    "sleek",
    "weighty",
    "choppy",
    "coastal",
    "central",
    "scorched",
    "lemongrass",
    "dust",
    "powder",
    "iron",
    "soda",
    "energy",
    "marmalade",
    "seductive",
    "lithe",
    "meld",
    "balancing",
    "refreshingly",
    "pristine",
    "northern",
    "custard",
    "sheer",
    "quince",
    "popcorn",
    "nervy",
    "saline",
    "mouthfilling",
    "cloying",
    "brightness",
    "shines",
    "rosemary",
    "acacia",
    "asphalt",
    "bursting",
    "mushrooms",
    "native",
    "grand",
    "raisins",
    "south",
    "petrol",
    "lamb",
    "reserved",
    "toffee",
    "composed",
    "creaminess",
    "potent",
    "nebbiolo",
    "aromatically",
    "grainy",
    "airing",
    "massive",
    "enhanced",
    "imported",
    "clear",
    "bubbly",
    "regular",
    "blueberries",
    "almonds",
    "vein",
    "punch",
    "fish",
    "pronounced",
    "muscular",
    "allspice",
    "beer",
    "sturdy",
    "creek",
    "soy",
    "oranges",
    "harmonious",
    "fruited",
    "rugged",
    "pinots",
    "brunello",
    "saucy",
    "infused",
    "tense",
    "plummy",
    "lacking",
    "produce",
    "flinty",
    "distinct",
    "crunchy",
    "textural",
    "capturing",
    "cheesy",
    "lanolin",
    "quiet",
    "indigenous",
    "fresher",
    "crisper",
    "strange",
    "quenching",
    "alcoholic",
    "lightest",
    "musky",
    "bristling",
    "confectionary",
    "feminine",
    "hot"
]


class FlavorTypoCorrector:
    def __init__(self, threshold): 
        self.threshold = threshold

    def __get_substitution_cost(self, word1, word2, i, j):
        if word1[i - 1] == word2[j - 1]:
            return 0
        elif (word1[i - 1], word2[j - 1]) in ADJACENT_CHARACTERS:
            return 1.5
        else:
            return 2

    def __get_minimum_edit_distance_matrix(self, word1, word2):
        matrix = {(0, 0): 0}
        for i in range(1, len(word1) + 1):
            matrix[i, 0] = matrix[i - 1, 0] + 1
        for i in range(1, len(word2) + 1):
            matrix[0, i] = matrix[0, i - 1] + 1
        for i in range(1, len(word1) + 1):
            for j in range(1, len(word2) + 1):
                matrix[i, j] = min(
                    matrix[i - 1, j] + 1,
                    matrix[i, j - 1] + 1,
                    matrix[i - 1, j - 1]
                    + self.__get_substitution_cost(word1, word2, i, j),
                )
        return matrix

    def __get_minimum_edit_distance(self, word1, word2):
        word1 = word1.lower()
        word2 = word2.lower()
        matrix = self.__get_minimum_edit_distance_matrix(word1, word2)
        return matrix[len(word1), len(word2)]

    def get_replaced_flavor_list(self, user_input_list):
        output = user_input_list.copy()
        for i, user_input in enumerate(user_input_list):
            minimum_edit_distance_value = float("inf")
            minimum_edit_distance_word = ""
            for flavor in FLAVOR_KEYWORDS:
                current_minimum_edit_distance_value = self.__get_minimum_edit_distance(
                    user_input, flavor
                )
                if current_minimum_edit_distance_value < minimum_edit_distance_value:
                    minimum_edit_distance_value = current_minimum_edit_distance_value
                    minimum_edit_distance_word = flavor
            if minimum_edit_distance_value < self.threshold:
                output[i] = minimum_edit_distance_word
        return output
